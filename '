from django.test import TestCase
from rest_framework import status
from django.urls import reverse
from django.contrib.auth import get_user_model
from jobboard.test_utils import BaseAPITestCase
from .models import Job
from categories.models import Category, Skill

# Create your tests here.
User = get_user_model()

class JobPublicAPITests(BaseAPITestCase):
    """Test jobs API (public endpoints - no authentication required)"""
    
    def setUp(self):
        super().setUp()
        
        # Create categories and skills
        self.tech_category = Category.objects.create(name='Technology')
        self.marketing_category = Category.objects.create(name='Marketing')
        self.python_skill = Skill.objects.create(name='Python')
        self.javascript_skill = Skill.objects.create(name='JavaScript')
        
        # Create test companies
        self.company1 = self.create_test_company(name='Tech Company Inc')
        self.company2 = self.create_test_company(name='Marketing Agency LLC')
        
        # Create test jobs
        self.active_job1 = Job.objects.create(
            title='Senior Python Developer',
            description='We are looking for a senior Python developer',
            company=self.company1,
            posted_by=self.employer_user,
            location='Remote',
            job_type='full_time',
            salary_range='$100,000-$130,000',
            is_active=True
        )
        self.active_job1.categories.add(self.tech_category)
        self.active_job1.required_skills.add(self.python_skill)
        
        self.active_job2 = Job.objects.create(
            title='Frontend Developer',
            description='Frontend developer with JavaScript experience',
            company=self.company1,
            posted_by=self.employer_user,
            location='New York, NY',
            job_type='full_time',
            salary_range='$80,000-$100,000',
            is_active=True
        )
        self.active_job2.categories.add(self.tech_category)
        self.active_job2.required_skills.add(self.javascript_skill)
        
        self.inactive_job = Job.objects.create(
            title='Inactive Job Position',
            description='This job is not active',
            company=self.company2,
            posted_by=self.employer_user,
            location='San Francisco, CA',
            job_type='part_time',
            is_active=False
        )
    
    def test_list_jobs_public(self):
        """Test that public can list active jobs"""
        response = self.client.get(reverse('job-list-create'))
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        
        # Should only return active jobs
        self.assertEqual(len(response.data), 2)
        job_titles = [job['title'] for job in response.data]
        self.assertIn('Senior Python Developer', job_titles)
        self.assertIn('Frontend Developer', job_titles)
        self.assertNotIn('Inactive Job Position', job_titles)
    
    def test_retrieve_job_detail_public(self):
        """Test that public can retrieve job details"""
        response = self.client.get(reverse('job-detail', args=[self.active_job1.id]))
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(response.data['title'], 'Senior Python Developer')
        self.assertEqual(response.data['location'], 'Remote')
        self.assertEqual(response.data['job_type'], 'full_time')
    
    def test_retrieve_inactive_job_public(self):
        """Test that public cannot retrieve inactive job details"""
        response = self.client.get(reverse('job-detail', args=[self.inactive_job.id]))
        self.assertResponseError(response, status.HTTP_404_NOT_FOUND)
    
    def test_job_search(self):
        """Test job search functionality"""
        # Search by title
        response = self.client.get(reverse('job-search') + '?search=Python')
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['title'], 'Senior Python Developer')
        
        # Search by skill
        response = self.client.get(reverse('job-search') + '?search=JavaScript')
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['title'], 'Frontend Developer')
    
    def test_job_filtering(self):
        """Test job filtering by various criteria"""
        # Filter by location
        response = self.client.get(reverse('job-list-create') + '?location=Remote')
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['title'], 'Senior Python Developer')
        
        # Filter by job type
        response = self.client.get(reverse('job-list-create') + '?job_type=full_time')
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)
    
    def test_company_jobs_endpoint(self):
        """Test retrieving jobs for a specific company"""
        response = self.client.get(reverse('company-jobs', args=[self.company1.id]))
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        
        # Should return active jobs for company1
        self.assertEqual(len(response.data), 2)
        job_titles = [job['title'] for job in response.data]
        self.assertIn('Senior Python Developer', job_titles)
        self.assertIn('Frontend Developer', job_titles)
    
    def test_job_ordering(self):
        """Test that jobs are ordered by creation date (newest first)"""
        response = self.client.get(reverse('job-list-create'))
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        
        # Jobs should be ordered by -created_at (newest first)
        # The second job created should appear first
        self.assertEqual(response.data[0]['title'], 'Frontend Developer')
        self.assertEqual(response.data[1]['title'], 'Senior Python Developer')

class JobCreateTests(BaseAPITestCase):
    """Test job creation functionality"""
    
    def setUp(self):
        super().setUp()
        self.company = self.create_test_company()
        self.company.managers.add(self.employer_user)
        
        self.tech_category = Category.objects.create(name='Technology')
        self.python_skill = Skill.objects.create(name='Python')
    
    def test_create_job_as_company_manager(self):
        """Test that company managers can create jobs"""
        self.authenticate_user(self.employer_user)
        
        job_data = {
            'title': 'New Backend Developer Position',
            'description': 'We need a backend developer with Python experience',
            'company': self.company.id,
            'location': 'Remote',
            'job_type': 'full_time',
            'salary_range': '$90,000-$110,000',
            'categories': [self.tech_category.id],
            'required_skills': [self.python_skill.id],
            'is_active': True
        }
        
        response = self.client.post(reverse('job-list-create'), job_data)
        self.assertResponseSuccess(response, status.HTTP_201_CREATED)
        self.assertEqual(response.data['title'], 'New Backend Developer Position')
        self.assertEqual(response.data['location'], 'Remote')
        
        # Verify job was created with correct poster
        job = Job.objects.get(title='New Backend Developer Position')
        self.assertEqual(job.posted_by, self.employer_user)
        self.assertEqual(job.company, self.company)
        
        # Verify categories and skills were added
        self.assertEqual(job.categories.count(), 1)
        self.assertEqual(job.required_skills.count(), 1)
    
    def test_create_job_unauthenticated(self):
        """Test that unauthenticated users cannot create jobs"""
        job_data = {
            'title': 'Unauthorized Job',
            'description': 'Should not be created',
            'company': self.company.id,
            'location': 'Remote',
            'job_type': 'full_time'
        }
        
        response = self.client.post(reverse('job-list-create'), job_data)
        self.assertResponseError(response, status.HTTP_401_UNAUTHORIZED)
    
    def test_create_job_not_company_manager(self):
        """Test that non-managers cannot create jobs for a company"""
        # Create a user who is not a manager of the company
        other_employer = self.create_user(
            username='otheremployer',
            user_type='employer'
        )
        
        self.authenticate_user(other_employer)
        
        job_data = {
            'title': 'Unauthorized Job Creation',
            'description': 'Should be forbidden',
            'company': self.company.id,  # Company they don't manage
            'location': 'Remote',
            'job_type': 'full_time'
        }
        
        response = self.client.post(reverse('job-list-create'), job_data)
        self.assertResponseError(response, status.HTTP_400_BAD_REQUEST)
        self.assertIn('must be a manager', str(response.data))
    
    def test_create_job_validation(self):
        """Test job creation validation"""
        self.authenticate_user(self.employer_user)
        
        # Test missing required fields
        invalid_data = {
            'description': 'Job without title',
            'company': self.company.id
        }
        
        response = self.client.post(reverse('job-list-create'), invalid_data)
        self.assertResponseError(response, status.HTTP_400_BAD_REQUEST)
        self.assertIn('title', response.data)
    
    def test_create_job_default_active(self):
        """Test that new jobs are active by default"""
        self.authenticate_user(self.employer_user)

        job_data = {
            'title': 'Job with default active status',
            'description': 'This job should be active by default',
            'company': self.company.id,
            'location': 'Remote',
            'job_type': 'full_time',
            'categories': [self.tech_category.id],
            'required_skills': [self.python_skill.id]
            # is_active not specified - should default to True
        }

        response = self.client.post(reverse('job-list-create'), job_data)
        self.assertResponseSuccess(response, status.HTTP_201_CREATED)
        self.assertTrue(response.data['is_active'])

class JobUpdateTests(BaseAPITestCase):
    """Test job update functionality"""
    
    def setUp(self):
        super().setUp()
        self.company = self.create_test_company()
        self.company.managers.add(self.employer_user)
        
        self.tech_category = Category.objects.create(name='Technology')
        self.design_category = Category.objects.create(name='Design')
        self.python_skill = Skill.objects.create(name='Python')
        self.react_skill = Skill.objects.create(name='React')
        
        self.job = Job.objects.create(
            title='Original Job Title',
            description='Original description',
            company=self.company,
            posted_by=self.employer_user,
            location='Original Location',
            job_type='full_time',
            salary_range='$80,000-$100,000',
            is_active=True
        )
        self.job.categories.add(self.tech_category)
        self.job.required_skills.add(self.python_skill)
    
    def test_update_job_as_owner(self):
        """Test that job owner can update job"""
        self.authenticate_user(self.employer_user)
        
        update_data = {
            'title': 'Updated Job Title',
            'description': 'Updated description',
            'location': 'Updated Location',
            'job_type': 'full_time',
            'salary_range': '$90,000-$110,000',
            'categories': [self.tech_category.id, self.design_category.id],
            'required_skills': [self.python_skill.id, self.react_skill.id]
        }
        
        response = self.client.put(
            reverse('job-detail', args=[self.job.id]), 
            update_data
        )
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(response.data['title'], 'Updated Job Title')
        self.assertEqual(response.data['location'], 'Updated Location')
        
        # Verify database was updated
        self.job.refresh_from_db()
        self.assertEqual(self.job.title, 'Updated Job Title')
        self.assertEqual(self.job.categories.count(), 2)
        self.assertEqual(self.job.required_skills.count(), 2)
    
    def test_update_job_as_company_manager(self):
        """Test that company managers can update jobs"""
        # Add another manager to the company
        other_manager = self.create_user(
            username='othermanager',
            user_type='employer'
        )
        self.company.managers.add(other_manager)
        
        self.authenticate_user(other_manager)
        
        update_data = {
            'title': 'Updated by Manager',
            'description': 'Updated by company manager',
            'location': 'Updated Location',
            'job_type': 'full_time',
            'salary_range': '$90,000-$110,000',
            'categories': [self.tech_category.id, self.design_category.id],
            'required_skills': [self.python_skill.id, self.react_skill.id]
        }
        
        response = self.client.put(
            reverse('job-detail', args=[self.job.id]), 
            update_data
        )
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(response.data['title'], 'Updated by Manager')
    
    def test_update_job_as_admin(self):
        """Test that admins can update any job"""
        self.authenticate_user(self.admin_user)
        
        update_data = {
            'title': 'Updated by Admin',
            'description': 'Updated by administrator',
            'location': 'Updated Location',
            'job_type': 'full_time',
            'salary_range': '$90,000-$110,000',
            'categories': [self.tech_category.id, self.design_category.id],
            'required_skills': [self.python_skill.id, self.react_skill.id]
        }
        
        response = self.client.put(
            reverse('job-detail', args=[self.job.id]), 
            update_data
        )
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(response.data['title'], 'Updated by Admin')
    
    def test_update_job_unauthorized(self):
        """Test that unauthorized users cannot update jobs"""
        # Try as job seeker (not manager)
        self.authenticate_user(self.job_seeker_user)
        
        update_data = {'title': 'Unauthorized Update'}
        response = self.client.put(
            reverse('job-detail', args=[self.job.id]), 
            update_data
        )
        self.assertResponsePermissionDenied(response)
        
        # Verify job was not updated
        self.job.refresh_from_db()
        self.assertEqual(self.job.title, 'Original Job Title')
    
    def test_partial_update_job(self):
        """Test partial updates using PATCH"""
        self.authenticate_user(self.employer_user)
        
        update_data = {
            'title': 'Partially Updated Title',
            'is_active': False
        }
        
        response = self.client.patch(
            reverse('job-detail', args=[self.job.id]), 
            update_data
        )
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(response.data['title'], 'Partially Updated Title')
        self.assertFalse(response.data['is_active'])
        self.assertEqual(response.data['location'], 'Original Location')  # Should remain unchanged

class JobDeleteTests(BaseAPITestCase):
    """Test job deletion functionality"""
    
    def setUp(self):
        super().setUp()
        self.company = self.create_test_company()
        self.company.managers.add(self.employer_user)
        
        self.job = Job.objects.create(
            title='Job to Delete',
            description='This job will be deleted',
            company=self.company,
            posted_by=self.employer_user,
            location='Remote',
            job_type='full_time',
            is_active=True
        )
    
    def test_delete_job_as_owner(self):
        """Test that job owner can delete job"""
        self.authenticate_user(self.employer_user)
        
        response = self.client.delete(reverse('job-detail', args=[self.job.id]))
        self.assertResponseSuccess(response, status.HTTP_204_NO_CONTENT)
        
        # Verify job was deleted
        self.assertFalse(Job.objects.filter(id=self.job.id).exists())
    
    def test_delete_job_as_company_manager(self):
        """Test that company managers can delete jobs"""
        # Add another manager
        other_manager = self.create_user(
            username='othermanager',
            user_type='employer'
        )
        self.company.managers.add(other_manager)
        
        self.authenticate_user(other_manager)
        
        response = self.client.delete(reverse('job-detail', args=[self.job.id]))
        self.assertResponseSuccess(response, status.HTTP_204_NO_CONTENT)
        self.assertFalse(Job.objects.filter(id=self.job.id).exists())
    
    def test_delete_job_as_admin(self):
        """Test that admins can delete any job"""
        self.authenticate_user(self.admin_user)
        
        response = self.client.delete(reverse('job-detail', args=[self.job.id]))
        self.assertResponseSuccess(response, status.HTTP_204_NO_CONTENT)
        self.assertFalse(Job.objects.filter(id=self.job.id).exists())
    
    def test_delete_job_unauthorized(self):
        """Test that unauthorized users cannot delete jobs"""
        self.authenticate_user(self.job_seeker_user)
        
        response = self.client.delete(reverse('job-detail', args=[self.job.id]))
        self.assertResponsePermissionDenied(response)
        
        # Verify job still exists
        self.assertTrue(Job.objects.filter(id=self.job.id).exists())

class JobActivationTests(BaseAPITestCase):
    """Test job activation/deactivation functionality"""
    
    def setUp(self):
        super().setUp()
        self.company = self.create_test_company()
        self.company.managers.add(self.employer_user)
        
        self.job = Job.objects.create(
            title='Job for Activation Test',
            description='Job for activation testing',
            company=self.company,
            posted_by=self.employer_user,
            location='Remote',
            job_type='full_time',
            is_active=True
        )
    
    def test_deactivate_job_as_manager(self):
        """Test that company managers can deactivate jobs"""
        self.authenticate_user(self.employer_user)
        
        response = self.client.patch(reverse('job-activation', args=[self.job.id]))
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertFalse(response.data['is_active'])
        self.assertIn('deactivated', response.data['message'])
        
        # Verify job was deactivated
        self.job.refresh_from_db()
        self.assertFalse(self.job.is_active)
    
    def test_activate_job_as_manager(self):
        """Test that company managers can activate jobs"""
        # First deactivate the job
        self.job.is_active = False
        self.job.save()
        
        self.authenticate_user(self.employer_user)
        
        response = self.client.patch(reverse('job-activation', args=[self.job.id]))
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertTrue(response.data['is_active'])
        self.assertIn('activated', response.data['message'])
        
        # Verify job was activated
        self.job.refresh_from_db()
        self.assertTrue(self.job.is_active)
    
    def test_activation_unauthorized(self):
        """Test that unauthorized users cannot activate/deactivate jobs"""
        self.authenticate_user(self.job_seeker_user)
        
        response = self.client.patch(reverse('job-activation', args=[self.job.id]))
        self.assertResponsePermissionDenied(response)
        
        # Verify job status unchanged
        self.job.refresh_from_db()
        self.assertTrue(self.job.is_active)

class JobAdminAPITests(BaseAPITestCase):
    """Test admin-only job endpoints"""
    
    def setUp(self):
        super().setUp()
        self.company = self.create_test_company()
        
        self.active_job = Job.objects.create(
            title='Active Job',
            description='Active job description',
            company=self.company,
            posted_by=self.employer_user,
            is_active=True
        )
        self.inactive_job = Job.objects.create(
            title='Inactive Job',
            description='Inactive job description',
            company=self.company,
            posted_by=self.employer_user,
            is_active=False
        )
    
    def test_admin_list_all_jobs(self):
        """Test that admins can list all jobs (including inactive)"""
        self.authenticate_user(self.admin_user)
        
        response = self.client.get(reverse('admin-job-list'))
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        
        # Should return both active and inactive jobs
        self.assertEqual(len(response.data), 2)
        job_titles = [job['title'] for job in response.data]
        self.assertIn('Active Job', job_titles)
        self.assertIn('Inactive Job', job_titles)
    
    def test_admin_list_jobs_unauthorized(self):
        """Test that non-admins cannot access admin job list"""
        self.authenticate_user(self.employer_user)
        response = self.client.get(reverse('admin-job-list'))
        self.assertResponsePermissionDenied(response)
        
        self.authenticate_user(self.job_seeker_user)
        response = self.client.get(reverse('admin-job-list'))
        self.assertResponsePermissionDenied(response)

class JobFilterTests(BaseAPITestCase):
    """Test advanced job filtering"""
    
    def setUp(self):
        super().setUp()
        
        # Create categories and skills
        self.tech_category = Category.objects.create(name='Technology')
        self.marketing_category = Category.objects.create(name='Marketing')
        self.python_skill = Skill.objects.create(name='Python')
        self.javascript_skill = Skill.objects.create(name='JavaScript')
        
        self.company = self.create_test_company()
        self.company.managers.add(self.employer_user)
        
        # Create various test jobs
        self.remote_job = Job.objects.create(
            title='Remote Python Developer',
            description='Remote Python developer position',
            company=self.company,
            posted_by=self.employer_user,
            location='Remote',
            job_type='full_time',
            salary_range='$100,000-$120,000',
            is_active=True
        )
        self.remote_job.categories.add(self.tech_category)
        self.remote_job.required_skills.add(self.python_skill)
        
        self.ny_job = Job.objects.create(
            title='NYC JavaScript Developer',
            description='JavaScript developer in NYC',
            company=self.company,
            posted_by=self.employer_user,
            location='New York, NY',
            job_type='full_time',
            salary_range='$90,000-$110,000',
            is_active=True
        )
        self.ny_job.categories.add(self.tech_category)
        self.ny_job.required_skills.add(self.javascript_skill)
        
        self.part_time_job = Job.objects.create(
            title='Part-time Marketing Specialist',
            description='Part-time marketing role',
            company=self.company,
            posted_by=self.employer_user,
            location='Remote',
            job_type='part_time',
            salary_range='$50,000-$60,000',
            is_active=True
        )
        self.part_time_job.categories.add(self.marketing_category)
    
    def test_filter_by_category(self):
        """Test filtering jobs by category"""
        response = self.client.get(
            reverse('job-search') + f'?categories={self.tech_category.id}'
        )
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)  # Both tech jobs
        
        response = self.client.get(
            reverse('job-search') + f'?categories={self.marketing_category.id}'
        )
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)  # Only marketing job
    
    def test_filter_by_skill(self):
        """Test filtering jobs by required skill"""
        response = self.client.get(
            reverse('job-search') + f'?skills={self.python_skill.id}'
        )
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['title'], 'Remote Python Developer')
    
    def test_filter_by_job_type(self):
        """Test filtering jobs by job type"""
        response = self.client.get(
            reverse('job-search') + '?job_type=part_time'
        )
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['title'], 'Part-time Marketing Specialist')
    
    def test_filter_by_multiple_criteria(self):
        """Test filtering by multiple criteria"""
        response = self.client.get(
            reverse('job-search') + '?location=Remote&job_type=full_time'
        )
        self.assertResponseSuccess(response, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['title'], 'Remote Python Developer')

